package types

import (
	"fmt"

	"go.dedis.ch/kyber/v3"
	rabin "go.dedis.ch/kyber/v3/share/dkg/rabin"
	"go.dedis.ch/kyber/v3/suites"
)

func SecretCommitsToProtocol(sc *rabin.SecretCommits) (*SecretCommits, error) {
	points := make([][]byte, len(sc.Commitments))
	for i, c := range sc.Commitments {
		cBytes, err := c.MarshalBinary()
		if err != nil {
			return nil, fmt.Errorf("marshal commitment: %w", err)
		}
		points[i] = cBytes
	}

	return &SecretCommits{
		Index: sc.Index,
		// TargetIndex: sc.TargetIndex,
		Commitments: points,
		SessionID:   sc.SessionID,
		Signature:   sc.Signature,
	}, nil
}

func SecretCommitsFromProtocol(suite suites.Suite, sc *SecretCommits) (*rabin.SecretCommits, error) {
	// convert kyber points
	points := make([]kyber.Point, len(sc.Commitments))
	for i, c := range sc.Commitments {
		commitPoint := suite.Point()
		err := commitPoint.UnmarshalBinary(c)
		if err != nil {
			return nil, fmt.Errorf("unmarshal commitment: %w", err)
		}
		points[i] = commitPoint
	}

	return &rabin.SecretCommits{
		Index:       sc.Index,
		Commitments: points,
		SessionID:   sc.SessionID,
		Signature:   sc.Signature,
	}, nil
}

type SecretCommits struct {
	// Index of the Dealer in the list of participants
	Index uint32
	// Commitments generated by the Dealer
	Commitments [][]byte
	// SessionID generated by the Dealer tied to the Deal
	SessionID []byte
	// Signature from the Dealer
	Signature []byte
}

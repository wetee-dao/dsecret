package types

import (
	"fmt"

	"github.com/ipfs/go-cid"
	mh "github.com/multiformats/go-multihash"
	"go.dedis.ch/kyber/v3"
	"go.dedis.ch/kyber/v3/share"
	rabin "go.dedis.ch/kyber/v3/share/dkg/rabin"
	"go.dedis.ch/kyber/v3/suites"
)

func SecretCommitsToProtocol(sc *rabin.SecretCommits) (*SecretCommits, error) {
	points := make([][]byte, len(sc.Commitments))
	for i, c := range sc.Commitments {
		cBytes, err := c.MarshalBinary()
		if err != nil {
			return nil, fmt.Errorf("marshal commitment: %w", err)
		}
		points[i] = cBytes
	}

	return &SecretCommits{
		Index: sc.Index,
		// TargetIndex: sc.TargetIndex,
		Commitments: points,
		SessionID:   sc.SessionID,
		Signature:   sc.Signature,
	}, nil
}

func SecretCommitsFromProtocol(suite suites.Suite, sc *SecretCommits) (*rabin.SecretCommits, error) {
	// convert kyber points
	points := make([]kyber.Point, len(sc.Commitments))
	for i, c := range sc.Commitments {
		commitPoint := suite.Point()
		err := commitPoint.UnmarshalBinary(c)
		if err != nil {
			return nil, fmt.Errorf("unmarshal commitment: %w", err)
		}
		points[i] = commitPoint
	}

	return &rabin.SecretCommits{
		Index:       sc.Index,
		Commitments: points,
		SessionID:   sc.SessionID,
		Signature:   sc.Signature,
	}, nil
}

type SecretCommits struct {
	// Index of the Dealer in the list of participants
	Index uint32
	// Commitments generated by the Dealer
	Commitments [][]byte
	// SessionID generated by the Dealer tied to the Deal
	SessionID []byte
	// Signature from the Dealer
	Signature []byte
}

// DistKeyShare
type DistKeyShare struct {
	// Coefficients of the public polynomial holding the public key
	Commits []kyber.Point

	// PriShare of the distributed secret
	PriShare *share.PriShare
}

type Secret struct {
	EncCmt  []byte   `json:"enc_cmt,omitempty"`  // encryption commitment
	EncScrt [][]byte `json:"enc_scrt,omitempty"` // enncrypted secret
}

func CidFromBytes(b []byte) (cid.Cid, error) {
	h, err := mh.Sum(b, mh.SHA2_256, -1)
	if err != nil {
		return cid.Undef, err
	}
	return cid.NewCidV1(cid.Raw, h), nil
}
